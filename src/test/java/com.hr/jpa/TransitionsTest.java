package com.hr.jpa;

import com.hr.Employee;
import org.junit.jupiter.api.Test;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.UserTransaction;

import static com.hr.jpa.TestUtils.exampleEmployee;
import static java.util.concurrent.Executors.newSingleThreadExecutor;
import static org.junit.jupiter.api.Assertions.*;

class TransitionsTest extends JpaTest {

  @Test
  void shouldMakePersistentAndDetachedAfterTransaction() throws Exception {
    try {
      // GIVEN
      PersistenceUnitUtil persistenceUnitUtil = JPA.getPersistenceUnitUtil();
      EntityManager entityManager = JPA.createEntityManager();
      UserTransaction transaction = TM.getUserTransaction();
      Employee employee = exampleEmployee();

      transaction.begin();

      // WHEN
      entityManager.persist(employee);

      // THEN
      // The entity instance is in persistent state
      assertTrue(entityManager.contains(employee));

      int expectedId = employee.getId();

      transaction.commit();
      entityManager.close();

      // The entity instance is in a detached state
      assertFalse(entityManager.isOpen());
      assertEquals(expectedId, persistenceUnitUtil.getIdentifier(employee));
    } finally {
      TM.rollback();
    }
  }

  @Test
  void shouldSaveEntity() throws Exception {
    try {
      // GIVEN
      EntityManager entityManager = JPA.createEntityManager();
      UserTransaction transaction = TM.getUserTransaction();
      Employee employee = exampleEmployee();

      transaction.begin();

      // WHEN
      entityManager.persist(employee);
      int expectedId = employee.getId();

      transaction.commit();
      entityManager.close();

      // THEN
      assertEmployeeIsPresent(expectedId);
    } finally {
      TM.rollback();
    }
  }

  @Test
  void shouldUpdatePersistentEntity() throws Exception {
    try {
      // GIVEN
      // An employee is persisted
      EntityManager entityManager = JPA.createEntityManager();
      UserTransaction transaction = TM.getUserTransaction();

      transaction.begin();

      Employee employee = exampleEmployee(1, "Jane", "Foo");

      entityManager.persist(employee);

      Integer id = employee.getId();

      // WHEN
      // The persisted entity changes
      employee.setFirstName("Other");

      // And transaction ends
      transaction.commit();
      entityManager.close();

      // THEN
      Employee foundEmployee = findById(id);
      assertEquals(foundEmployee.getFirstName(), "Other");
    } finally {
      TM.rollback();
    }
  }

  @Test
  void shouldRetrieveTheSameObjectInstanceInOneTransaction() throws Exception {
    try {
      // GIVEN
      int id = 1234;
      save(exampleEmployee(id, "Jane", "Doe"));

      EntityManager entityManager = JPA.createEntityManager();
      UserTransaction transaction = TM.getUserTransaction();

      // WHEN
      transaction.begin();

      Employee firstFoundEmployee = entityManager.find(Employee.class, id);
      Employee secondFoundEmployee =
          entityManager.find(Employee.class, id); // cached employee should be retrieved

      // THEN
      assertSame(firstFoundEmployee, secondFoundEmployee);
      assertEquals(firstFoundEmployee, secondFoundEmployee);

      transaction.commit();
      entityManager.close();
    } finally {
      TM.rollback();
    }
  }

  @Test
  void shouldMakeEntityTransient() throws Exception {
    try {
      // GIVEN
      int id = 1234;
      save(exampleEmployee(id, "Jane", "Doe"));

      PersistenceUnitUtil persistenceUnitUtil = JPA.getPersistenceUnitUtil();
      EntityManager entityManager = JPA.createEntityManager();
      UserTransaction transaction = TM.getUserTransaction();

      transaction.begin();

      // WHEN
      Employee employee = entityManager.find(Employee.class, id);
      entityManager.remove(employee);

      assertFalse(entityManager.contains(employee));
      // assertNull(employee.getId()); this works only when hibernate.use_identifier_rollback is
      // enabled and the id is generated by hibernate

      transaction.commit();
      entityManager.close();
    } finally {
      TM.rollback();
    }
  }

  @Test
  void shouldCancelDeletionWhenPersistIsCalledInRemovedState() throws Exception {
    try {
      // GIVEN
      int id = 1234;
      save(exampleEmployee(id, "Jane", "Doe"));

      EntityManager entityManager = JPA.createEntityManager();
      UserTransaction transaction = TM.getUserTransaction();

      transaction.begin();

      // WHEN
      Employee employee = entityManager.find(Employee.class, id);
      entityManager.remove(employee);

      // Employee is in removed state
      assertFalse(entityManager.contains(employee));

      // And gets back in persisted state
      entityManager.persist(employee);
      assertTrue(entityManager.contains(employee));

      transaction.commit();
      entityManager.close();
    } finally {
      TM.rollback();
    }
  }

  @Test
  void shouldRefreshEntity() throws Exception {
    try {
      // GIVEN
      int id = 1234;
      String oldFirstName = "OldName";
      String newFirstName = "NewName";
      String newTemporaryFirstname = "NewTemporaryName";

      save(exampleEmployee(id, oldFirstName, "Doe"));

      EntityManager entityManager = JPA.createEntityManager();
      UserTransaction transaction = TM.getUserTransaction();

      transaction.begin();

      // WHEN
      Employee employee = entityManager.find(Employee.class, id);

      // The name has assigned value
      assertEquals(oldFirstName, employee.getFirstName());

      // And the row is updated in the database
      newSingleThreadExecutor()
          .submit(
              () -> {
                try {
                  updateFirstName(id, newFirstName);
                } catch (Exception e) {
                  TM.rollback();
                  throw new RuntimeException("Concurrent operation failure: " + e, e);
                }
              })
          .get();

      // THEN
      // The name in found entity has old value
      assertEquals(oldFirstName, employee.getFirstName());

      // And after refresh, the name is refreshed
      entityManager.refresh(employee);

      assertNotEquals(oldFirstName, employee.getFirstName());
      assertEquals(newFirstName, employee.getFirstName());
    } finally {
      TM.rollback();
    }
  }

  private void updateFirstName(int id, String newFirstName) throws Exception {
    try {
      EntityManager insideEntityManager = JPA.createEntityManager();
      UserTransaction insideTransaction = TM.getUserTransaction();

      insideTransaction.begin();

      Employee foundEmployee = insideEntityManager.find(Employee.class, id);
      foundEmployee.setFirstName(newFirstName);

      insideTransaction.commit();
      insideEntityManager.close();
    } finally {
      TM.rollback();
    }
  }

  // todo
  void shouldRollbackPersistentEntityWhenExceptionIsThrown() throws Exception {
    Integer id = 1;
    EntityManager entityManager = null;
    UserTransaction transaction = null;

    try {
      // Given
      // An employee is persisted
      transaction = TM.getUserTransaction();
      entityManager = JPA.createEntityManager();

      transaction.begin();

      Employee employee = exampleEmployee(id, "Jane", "Foo");

      entityManager.persist(employee);

      // When
      // The persisted entity changes
      employee.setFirstName("Other");

      throw new RuntimeException();
    } finally {
      if (transaction != null) {
        transaction.getStatus();
        transaction.rollback();

        Employee employee = findById(id);
        assertNull(employee);
      }

      if (entityManager != null) {
        entityManager.close();
      }
    }
  }

  private void assertEmployeeIsPresent(Integer id) throws Exception {
    assertNotNull(findById(id));
  }
}
